# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AccessTokenRes {
  accessToken: String
  exp: Int
  iat: Int
}

type App2WxappLoginStrategy {
  ticketExchangeUserInfoNeedSecret: Boolean
  ticketExpriresAfter: Int
}

input App2WxappLoginStrategyInput {
  ticketExchangeUserInfoNeedSecret: Boolean
  ticketExpriresAfter: Int
}

type ChangeEmailStrategy {
  verifyOldEmail: Boolean
}

input ChangeEmailStrategyInput {
  verifyOldEmail: Boolean
}

type ChangePhoneStrategy {
  verifyOldPhone: Boolean
}

input ChangePhoneStrategyInput {
  verifyOldPhone: Boolean
}

type CommonMessage {
  code: Int
  message: String
}

input CreateUserInput {
  address: String
  birthdate: String
  blocked: Boolean
  browser: String
  company: String
  country: String
  device: String
  email: String
  emailVerified: Boolean
  familyName: String
  formatted: String
  gender: String
  givenName: String
  isDeleted: Boolean
  lastIP: String
  lastLogin: String
  locale: String
  locality: String
  loginsCount: Float
  middleName: String
  name: String
  nickname: String
  oauth: String
  openid: String
  password: String
  phone: String
  phoneVerified: Boolean
  photo: String
  postalCode: String
  preferredUsername: String
  profile: String
  region: String
  registerSource: [String!]
  signedUp: String
  streetAddress: String
  unionid: String
  username: String
  website: String
  zoneinfo: String
}

type CustomSMSProvider {
  config253: SMSConfig253
  enabled: Boolean
  provider: String
}

input CustomSMSProviderInput {
  config253: SMSConfig253Input
  enabled: Boolean
  provider: String
}

type FrequentRegisterCheckConfig {
  enabled: Boolean
  limit: Int
  timeInterval: Int
}

input FrequentRegisterCheckConfigInput {
  enabled: Boolean
  limit: Int
  timeInterval: Int
}

type Group {
  code: String!
  createdAt: String
  description: String
  name: String!
  updatedAt: String
  users: PaginatedUsers!
}

type Identity {
  connectionId: String
  isSocial: Boolean
  openid: String
  provider: String
  userId: String
  userIdInIdp: String
  userPoolId: String
}

type JWTTokenStatus {
  code: Int
  data: JWTTokenStatusDetail
  exp: Int
  iat: Int
  message: String
  status: Boolean
}

type JWTTokenStatusDetail {
  arn: String
  id: String
  userPoolId: String
}

input LoginByPhoneCodeInput {
  autoRegister: Boolean
  clientIp: String
  code: String!
  phone: String!
}

input LoginByPhonePasswordInput {
  autoRegister: Boolean!
  captchaCode: String!
  clientIp: String!
  password: String
  phone: String
}

type LoginFailCheckConfig {
  enabled: Boolean
  limit: Int
  timeInterval: Int
}

input LoginFailCheckConfigInput {
  enabled: Boolean
  limit: Int
  timeInterval: Int
}

type Mutation {
  createUser(keepPassword: Boolean, userInfo: CreateUserInput!): User!
  deleteUser(id: String!): CommonMessage
  deleteUserpool: CommonMessage!
  loginByPhoneCode(input: LoginByPhoneCodeInput!): User
  loginByPhonePassword(input: LoginByPhonePasswordInput!): User
  refreshToken(id: String): RefreshToken
  resetPassword(code: String!, email: String, newPassword: String!, phone: String): CommonMessage!
  updateUser(id: String, input: UpdateUserInput!): User!
  updateUserpool(input: UpdateUserpoolInput!): UserPool!
}

type PaginatedGroups {
  list: [Group!]!
  totalCount: Int!
}

type PaginatedRoles {
  list: [Role!]!
  totalCount: Int!
}

type PaginatedUsers {
  list: [User!]!
  pageNo: Int
  pageSize: Int
  totalCount: Int!
}

type QrcodeLoginStrategy {
  allowExchangeUserInfoFromBrowser: Boolean
  qrcodeExpiresAfter: Int
  returnFullUserInfo: Boolean
  ticketExpiresAfter: Int
}

input QrcodeLoginStrategyInput {
  allowExchangeUserInfoFromBrowser: Boolean
  qrcodeExpiresAfter: Int
  returnFullUserInfo: Boolean
  ticketExpiresAfter: Int
}

type Query {
  accessToken(secret: String!, userPoolId: String!): AccessTokenRes!
  checkLoginStatus(token: String): JWTTokenStatus
  getClientWhenSdkInit(clientId: String, nonce: Int, retUserId: Boolean, secret: String, signature: String, timestamp: String): AccessTokenRes!
  searchUser(fields: [String], limit: Int, page: Int, query: String!): PaginatedUsers!
  user(id: String): User
  userpool: UserPool!
  users(limit: Int, page: Int, sortBy: SortByEnum): PaginatedUsers!
}

type RefreshToken {
  exp: Int
  iat: Int
  token: String
}

type RegisterWhiteListConfig {
  emailEnabled: Boolean
  phoneEnabled: Boolean
  usernameEnabled: Boolean
}

input RegisterWhiteListConfigInput {
  emailEnabled: Boolean
  phoneEnabled: Boolean
  usernameEnabled: Boolean
}

type Role {
  arn: String!
  code: String!
  createdAt: String
  description: String
  isSystem: Boolean
  parent: Role
  updatedAt: String
  users: PaginatedUsers!
}

type SMSConfig253 {
  appId: String!
  key: String!
  sendSmsApi: String!
  template: String!
  ttl: Int!
}

input SMSConfig253Input {
  appId: String!
  key: String!
  sendSmsApi: String!
  template: String!
  ttl: Int!
}

enum SortByEnum {
  CREATEDAT_ASC
  CREATEDAT_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
}

input UpdateUserInput {
  address: String
  birthdate: String
  blocked: Boolean
  browser: String
  city: String
  company: String
  country: String
  device: String
  email: String
  emailVerified: Boolean
  familyName: String
  formatted: String
  gender: String
  givenName: String
  lastIP: String
  lastLogin: String
  locale: String
  locality: String
  loginsCount: Int
  middleName: String
  name: String
  nickname: String
  oauth: String
  openid: String
  password: String
  phone: String
  phoneVerified: Boolean
  photo: String
  postalCode: String
  preferredUsername: String
  profile: String
  province: String
  region: String
  streetAddress: String
  tokenExpiredAt: String
  unionid: String
  username: String
  website: String
  zoneinfo: String
}

input UpdateUserpoolInput {
  allowedOrigins: String
  app2WxappLoginStrategy: App2WxappLoginStrategyInput
  changeEmailStrategy: ChangeEmailStrategyInput
  changePhoneStrategy: ChangePhoneStrategyInput
  customSMSProvider: CustomSMSProviderInput
  description: String
  domain: String
  emailVerifiedDefault: Boolean
  frequentRegisterCheck: FrequentRegisterCheckConfigInput
  loginFailCheck: LoginFailCheckConfigInput
  logo: String
  name: String
  qrcodeLoginStrategy: QrcodeLoginStrategyInput
  registerDisabled: Boolean
  sendWelcomeEmail: Boolean
  tokenExpiresAfter: Int
  userpoolTypes: [String!]
  whitelist: RegisterWhiteListConfigInput
}

type User {
  address: String
  arn: String!
  birthdate: String
  blocked: Boolean
  browser: String
  city: String
  company: String
  country: String
  createdAt: String
  customData: String
  device: String
  email: String
  emailVerified: Boolean
  familyName: String
  formatted: String
  gender: String
  givenName: String
  groups: PaginatedGroups
  id: String!
  identities: [Identity!]
  isDeleted: Boolean
  lastIP: String
  lastLogin: String
  locale: String
  locality: String
  loginsCount: Int
  middleName: String
  name: String
  nickname: String
  oauth: String
  openid: String
  password: String
  phone: String
  phoneVerified: Boolean
  photo: String
  postalCode: String
  preferredUsername: String
  profile: String
  province: String
  region: String
  registerSource: [String!]!
  roles: PaginatedRoles
  signedUp: String
  streetAddress: String
  token: String
  tokenExpiredAt: String
  unionid: String
  updatedAt: String
  username: String
  userPoolId: String!
  website: String
  zoneinfo: String
}

type UserPool {
  allowedOrigins: String
  app2WxappLoginStrategy: App2WxappLoginStrategy
  changeEmailStrategy: ChangeEmailStrategy
  changePhoneStrategy: ChangePhoneStrategy
  createdAt: String
  customSMSProvider: CustomSMSProvider
  description: String
  domain: String!
  emailVerifiedDefault: Boolean!
  frequentRegisterCheck: FrequentRegisterCheckConfig
  id: String!
  isDeleted: Boolean
  jwtSecret: String!
  loginFailCheck: LoginFailCheckConfig
  logo: String!
  name: String!
  qrcodeLoginStrategy: QrcodeLoginStrategy
  registerDisabled: Boolean!
  secret: String!
  sendWelcomeEmail: Boolean!
  showWxQRCodeWhenRegisterDisabled: Boolean
  tokenExpiresAfter: Int
  updatedAt: String
  userpoolTypes: [UserPoolType!]
  whitelist: RegisterWhiteListConfig
}

type UserPoolType {
  code: String
  description: String
  image: String
  name: String
  sdks: [String]
}
